name: Docker Image CI

on:
  push:
    branches: [ testnet-polyjuice-api-image ]

env:
  IMAGE_NAME: testnet-polyjuice-api

jobs:
  sync-testnet-indexer:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node_modules
      uses: actions/cache@v2
      with:
        path: |
          node_modules
          packages/*/node_modules
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
    - name: Cache Testnet Indexer Data
      id: indexer-cache
      uses: actions/cache@v2
      with:
        path: |
          packages/runner/db/ckb-indexer-testnet
          packages/runner/db/backup
        key: Aggron
        # restore-keys: |
        #   Aggron-datetime
    - name: Download nervos-ckb-indexer-testnet-snapshot
      if: steps.indexer-cache.outputs.cache-hit != 'true'
      run: |
        curl -LO https://s3.amazonaws.com/cdn.ckb.tools/snapshots/20210704-nervos-ckb-indexer-testnet-snapshot.7z
        sudo apt install p7zip-full -y
        mkdir -p packages/runner/db/ckb-indexer-testnet
        7z x 20210704-nervos-ckb-indexer-testnet-snapshot.7z -opackages/runner/db/ckb-indexer-testnet
        ls packages/runner/db
        ls packages/runner/db/ckb-indexer-testnet
    - name: Testnet Indexer Sync
      working-directory: packages/runner
      run: MIN=0.2 yarn sync-indexer
  # Push image to GitHub Packages
  build-and-push-image:
    # Ensure test job passes before pushing image.
    needs: sync-testnet-indexer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Testnet Indexer Data
        id: indexer-cache
        uses: actions/cache@v2
        with:
          path: |
            packages/runner/db/ckb-indexer-testnet
            packages/runner/db/backup
          key: Aggron
      - name: Build image
        run: docker build . --file Dockerfile.api --tag $IMAGE_NAME:$(date +%F_%H%M)
        # restore-keys: |
        #   Aggron-datetime
      # - name: Login GitHub Container Registry
      #   # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
      #   run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

  # add cache

  # push image
  #  - name: Push image to GitHub Container Registry
  #       run: |
  #         IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "kubesail" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
